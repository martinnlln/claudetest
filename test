<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Price Prediction Dashboard</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;800&display=swap" rel="stylesheet">
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #0d1b2a 0%, #1b263b 100%);
            color: #e0e1dd;
            min-height: 100vh;
            overflow-x: hidden;
        }

        /* Header */
        header {
            background: rgba(27, 38, 59, 0.95);
            backdrop-filter: blur(12px);
            padding: 1rem 2rem;
            position: fixed;
            width: 100%;
            z-index: 1000;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            max-width: 1400px;
            margin: 0 auto;
        }

        .logo {
            font-size: 2rem;
            font-weight: 800;
            color: #00d4ff;
            text-transform: uppercase;
            letter-spacing: 3px;
        }

        nav ul {
            display: flex;
            list-style: none;
            gap: 2.5rem;
        }

        nav a {
            color: #e0e1dd;
            text-decoration: none;
            font-size: 1.1rem;
            font-weight: 500;
            transition: color 0.3s ease, text-shadow 0.3s ease;
        }

        nav a:hover {
            color: #00d4ff;
            text-shadow: 0 0 15px rgba(0, 212, 255, 0.7);
        }

        /* Hero Section */
        .hero {
            height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            background: radial-gradient(circle at center, rgba(0, 212, 255, 0.25), transparent);
            padding: 2rem;
        }

        .hero-content h1 {
            font-size: 4rem;
            font-weight: 900;
            margin-bottom: 1.5rem;
            background: linear-gradient(45deg, #00d4ff, #ff007a);
            -webkit-background-clip: text;
            background-clip: text;
            color: transparent;
        }

        .hero-content p {
            font-size: 1.4rem;
            max-width: 700px;
            margin: 0 auto 2.5rem;
            line-height: 1.7;
            color: #b0b8c4;
        }

        .cta-button {
            background: #00d4ff;
            color: #0d1b2a;
            padding: 1rem 2.5rem;
            border-radius: 50px;
            text-decoration: none;
            font-weight: 700;
            font-size: 1.2rem;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .cta-button:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 212, 255, 0.6);
        }

        /* Dashboard Section */
        .dashboard {
            max-width: 1400px;
            margin: 4rem auto;
            padding: 2rem;
        }

        .dashboard h2 {
            font-size: 3rem;
            margin-bottom: 2.5rem;
            text-align: center;
            color: #00d4ff;
            text-shadow: 0 0 10px rgba(0, 212, 255, 0.3);
        }

        /* Tabs */
        .tabs {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        .tab {
            padding: 0.8rem 1.5rem;
            background: #1b263b;
            border-radius: 8px;
            cursor: pointer;
            color: #e0e1dd;
            font-weight: 600;
            transition: background 0.3s ease, color 0.3s ease;
        }

        .tab.active, .tab:hover {
            background: #00d4ff;
            color: #0d1b2a;
        }

        /* Input Controls */
        .controls {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
        }

        input, select {
            padding: 0.9rem;
            border-radius: 8px;
            border: none;
            background: #1b263b;
            color: #e0e1dd;
            font-size: 1rem;
            width: 220px;
            transition: box-shadow 0.3s ease;
        }

        input:focus, select:focus {
            outline: none;
            box-shadow: 0 0 8px rgba(0, 212, 255, 0.5);
        }

        button {
            padding: 0.9rem 2rem;
            border: none;
            border-radius: 8px;
            background: #ff007a;
            color: #e0e1dd;
            font-weight: 700;
            cursor: pointer;
            transition: background 0.3s ease, transform 0.3s ease;
        }

        button:hover {
            background: #d1005e;
            transform: translateY(-3px);
        }

        /* Chart Containers */
        .chart-container {
            background: rgba(27, 38, 59, 0.85);
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);
        }

        canvas {
            max-height: 400px;
        }

        /* News Section */
        .news-feed {
            display: grid;
            gap: 1rem;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }

        .news-item {
            background: #1b263b;
            padding: 1.5rem;
            border-radius: 8px;
            transition: transform 0.3s ease;
        }

        .news-item:hover {
            transform: translateY(-5px);
        }

        .news-item h4 {
            color: #00d4ff;
            margin-bottom: 0.5rem;
        }

        /* Loading Spinner */
        .loading {
            text-align: center;
            font-size: 1.2rem;
            color: #00d4ff;
            display: none;
        }

        /* Footer */
        footer {
            text-align: center;
            padding: 3rem;
            background: #0d1b2a;
            color: #b0b8c4;
            font-size: 1.1rem;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .hero-content h1 {
                font-size: 2.8rem;
            }

            .hero-content p {
                font-size: 1.1rem;
            }

            nav ul {
                gap: 1rem;
            }

            .controls {
                flex-direction: column;
                align-items: center;
            }

            input, select {
                width: 100%;
                max-width: 300px;
            }

            .dashboard h2 {
                font-size: 2rem;
            }
        }

        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .hero-content, .dashboard {
            animation: fadeIn 1.2s ease-out;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <nav>
            <div class="logo">Price Oracle</div>
            <ul>
                <li><a href="#home">Home</a></li>
                <li><a href="#dashboard">Dashboard</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>

    <!-- Hero Section -->
    <section class="hero" id="home">
        <div class="hero-content">
            <h1>Master the Markets with AI</h1>
            <p>Unlock the power of advanced price predictions, technical indicators, and real-time insights with our state-of-the-art platform.</p>
            <a href="#dashboard" class="cta-button">Explore Dashboard</a>
        </div>
    </section>

    <!-- Dashboard Section -->
    <section class="dashboard" id="dashboard">
        <h2>Financial Intelligence Hub</h2>
        <div class="tabs">
            <div class="tab active" onclick="showTab('predictions')">Predictions</div>
            <div class="tab" onclick="showTab('historical')">Historical Data</div>
            <div class="tab" onclick="showTab('indicators')">Indicators</div>
            <div class="tab" onclick="flation')">Economic Indicators</div>
            <div class="tab" onclick="showTab('news')">News</div>
        </div>

        <!-- Controls -->
        <div class="controls">
            <input type="text" id="symbol" placeholder="Symbol (e.g., AAPL)" required>
            <select id="model-type">
                <option value="ensemble">Ensemble</option>
                <option value="time_series">Time Series</option>
                <option value="ml">Machine Learning</option>
                <option value="dl">Deep Learning</option>
            </select>
            <input type="date" id="start-date" placeholder="Start Date">
            <input type="date" id="end-date" placeholder="End Date">
            <button onclick="fetchData()">Fetch Data</button>
        </div>

        <div class="loading" id="loading">Loading...</div>

        <!-- Predictions Tab -->
        <div id="predictions" class="tab-content">
            <div class="chart-container">
                <canvas id="prediction-chart"></canvas>
            </div>
        </div>

        <!-- Historical Data Tab -->
        <div id="historical" class="tab-content" style="display: none;">
            <div class="chart-container">
                <canvas id="historical-chart"></canvas>
            </div>
        </div>

        <!-- Indicators Tab -->
        <div id="indicators" class="tab-content" style="display: none;">
            <div class="chart-container">
                <canvas id="indicators-chart"></canvas>
            </div>
        </div>

        <!-- Economic Indicators Tab -->
        <div id="economic" class="tab-content" style="display: none;">
            <div class="chart-container">
                <canvas id="economic-chart"></canvas>
            </div>
        </div>

        <!-- News Tab -->
        <div id="news" class="tab-content" style="display: none;">
            <div class="news-feed" id="news-feed"></div>
        </div>
    </section>

    <!-- Footer -->
    <footer>
        <p>© 2025 Price Oracle. Powered by AI, Built for the Future.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Chart.js Instances
        let predictionChart = null;
        let historicalChart = null;
        let indicatorsChart = null;
        let economicChart = null;

        // Chart Initialization
        function initializeChart(canvasId, labels = [], datasets = []) {
            const ctx = document.getElementById(canvasId).getContext('2d');
            let chartInstance;
            switch (canvasId) {
                case 'prediction-chart':
                    if (predictionChart) predictionChart.destroy();
                    chartInstance = predictionChart;
                    break;
                case 'historical-chart':
                    if (historicalChart) historicalChart.destroy();
                    chartInstance = historicalChart;
                    break;
                case 'indicators-chart':
                    if (indicatorsChart) indicatorsChart.destroy();
                    chartInstance = indicatorsChart;
                    break;
                case 'economic-chart':
                    if (economicChart) economicChart.destroy();
                    chartInstance = economicChart;
                    break;
            }

            return new Chart(ctx, {
                type: 'line',
                data: { labels, datasets },
                options: {
                    responsive: true,
                    scales: {
                        x: { title: { display: true, text: 'Date', color: '#e0e1dd' } },
                        y: { title: { display: true, text: 'Value', color: '#e0e1dd' } }
                    },
                    plugins: { legend: { labels: { color: '#e0e1dd' } } }
                }
            });
        }

        // Tab Management
        function showTab(tabId) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.style.display = 'none');
            document.querySelector(`.tab[onclick="showTab('${tabId}')"]`).classList.add('active');
            document.getElementById(tabId).style.display = 'block';
        }

        // Fetch Data Based on Tab
        async function fetchData() {
            const symbol = document.getElementById('symbol').value.trim().toUpperCase();
            const modelType = document.getElementById('model-type').value;
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            const activeTab = document.querySelector('.tab.active').getAttribute('onclick').match(/'([^']+)'/)[1];

            if (!symbol) {
                alert('Please enter a symbol');
                return;
            }

            document.getElementById('loading').style.display = 'block';

            try {
                if (activeTab === 'predictions') {
                    const response = await fetch(`http://localhost:8000/api/predict/${modelType}?symbol=${symbol}&days_ahead=7`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();
                    if (data.error) throw new Error(data.error);
                    predictionChart = initializeChart('prediction-chart', data.prediction_dates, [{
                        label: 'Predicted Prices',
                        data: data.predicted_prices,
                        borderColor: '#00d4ff',
                        backgroundColor: 'rgba(0, 212, 255, 0.2)',
                        fill: true
                    }]);
                } else if (activeTab === 'historical') {
                    const url = startDate && endDate 
                        ? `http://localhost:8000/api/historical-data/${symbol}?start_date=${startDate}&end_date=${endDate}`
                        : `http://localhost:8000/api/historical-data/${symbol}`;
                    const response = await fetch(url);
                    const data = await response.json();
                    if (data.error) throw new Error(data.error);
                    const source = Object.keys(data.data)[0]; // Use first source
                    const dates = data.data[source].map(d => d.date || d.timestamp);
                    const prices = data.data[source].map(d => d.close);
                    historicalChart = initializeChart('historical-chart', dates, [{
                        label: 'Close Price',
                        data: prices,
                        borderColor: '#ff007a',
                        backgroundColor: 'rgba(255, 0, 122, 0.2)',
                        fill: true
                    }]);
                } else if (activeTab === 'indicators') {
                    const url = startDate && endDate 
                        ? `http://localhost:8000/api/indicators/${symbol}?start_date=${startDate}&end_date=${endDate}`
                        : `http://localhost:8000/api/indicators/${symbol}`;
                    const response = await fetch(url);
                    const data = await response.json();
                    if (data.error) throw new Error(data.error);
                    // Example: Plot RSI from momentum indicators
                    const rsiData = data.indicators.momentum?.rsi || [];
                    const dates = rsiData.map(d => d.date || d.timestamp);
                    indicatorsChart = initializeChart('indicators-chart', dates, [{
                        label: 'RSI',
                        data: rsiData.map(d => d.value),
                        borderColor: '#00ff7f',
                        backgroundColor: 'rgba(0, 255, 127, 0.2)',
                        fill: false
                    }]);
                } else if (activeTab === 'economic') {
                    const response = await fetch(`http://localhost:8000/api/economic-indicators?indicators=GDP&indicators=UNRATE`);
                    const data = await response.json();
                    if (data.error) throw new Error(data.error);
                    const datasets = Object.keys(data.indicators).map(key => ({
                        label: key,
                        data: data.indicators[key].map(d => d.value),
                        borderColor: key === 'GDP' ? '#ff007a' : '#00d4ff',
                        backgroundColor: key === 'GDP' ? 'rgba(255, 0, 122, 0.2)' : 'rgba(0, 212, 255, 0.2)',
                        fill: false
                    }));
                    const dates = data.indicators.GDP?.map(d => d.date) || [];
                    economicChart = initializeChart('economic-chart', dates, datasets);
                } else if (activeTab === 'news') {
                    const response = await fetch(`http://localhost:8000/api/news/${symbol}?days=7`);
                    const data = await response.json();
                    if (data.error) throw new Error(data.error);
                    const newsFeed = document.getElementById('news-feed');
                    newsFeed.innerHTML = data.news.map(item => `
                        <div class="news-item">
                            <h4>${item.title || 'News'}</h4>
                            <p>${item.description || item.summary || 'No description'}</p>
                            <small>${new Date(item.date || item.published_at).toLocaleDateString()}</small>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error: ' + error.message);
            } finally {
                document.getElementById('loading').style.display = 'none';
            }
        }

        // Initialize Charts
        window.onload = () => {
            predictionChart = initializeChart('prediction-chart');
            historicalChart = initializeChart('historical-chart');
            indicatorsChart = initializeChart('indicators-chart');
            economicChart = initializeChart('economic-chart');
        };
    </script>
</body>
</html>
